.maindiv{
  height: 100vh;
  background-color: #e8f6f2; 
   text-align: center;
    padding: 20px;
}
.header{
  text-align: center;
  margin-bottom: 5px;
}
.Div{
 
}
.innerdiv{
  border: unset;
  text-decoration: none;
}
/* .innerdiv :hover{
  background-color:#77B0AA ;
  border: unset;
} */
.inputdiv{
  width: 50px;
  height: 50px;
  text-align: center;
  font-size: 1rem;
  background-color: #003C43;
  color: white;
 padding: 10px;
  border: unset;
  box-shadow: 0px 0px 5px 0px #135D66;
  outline: none ;

}

.error{
  margin-top: 20px;
  color: red;
  font-weight: bold;
  text-align: center;
}









/* import React, { useState } from 'react';
import './TicTac.css';

const TicTac = () => {
  const [click, setClick] = useState({
    1: '', 2: '', 3: '',
    4: '', 5: '', 6: '',
    7: '', 8: '', 9: ''
  });
  const [currentPlayer, setCurrentPlayer] = useState('x');
  const [winner, setWinner] = useState(null);

  const winningPos = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [1, 4, 7],
    [2, 5, 8],
    [3, 6, 9],
    [1, 5, 9],
    [3, 5, 7],
  ];

    if (click[i] === '' && !winner) {
      const newClick = { ...click, [i]: currentPlayer };
      setClick(newClick);
      checkWinner(newClick);
      setCurrentPlayer(currentPlayer === 'x' ? 'o' : 'x');
    }
  };

  const checkWinner = (newClick) => {
    for (let [a, b, c] of winningPos) {
      if (newClick[a] && newClick[a] === newClick[b] && newClick[a] === newClick[c]) {
        setWinner(newClick[a]);
        return;
      }
    }
    if (!Object.values(newClick).includes('')) {
      setWinner('draw');
    }
  };

  const handleRestart = () => {
    setClick({
      1: '', 2: '', 3: '',
      4: '', 5: '', 6: '',
      7: '', 8: '', 9: ''
    });
    setCurrentPlayer('x');
    setWinner(null);
  };

  return (
    <div className='mainDiv'>
      <h2 className='header'>Tic Tac Toe</h2>
      <div className='innerDiv'>
        <div className='border'>
          { [1, 2, 3].map(i => (
            <div key={i} onClick={() => handleClick(i)} className='btndiv'>
              {click[i]}
            </div>
          )) }
        </div>
        <div className='border'>
          { [4, 5, 6].map(i => (
            <div key={i} onClick={() => handleClick(i)} className='btndiv'>
              {click[i]}
            </div>
          )) }
        </div>
        <div className='border'>
          { [7, 8, 9].map(i => (
            <div key={i} onClick={() => handleClick(i)} className='btndiv'>
              {click[i]}
            </div>
          )) }
        </div>
        <div>
          <button className='restartBtn' onClick={handleRestart}>Restart</button>
        </div>
        {winner && <div className='winner'>Winner: {winner === 'draw' ? 'Draw' : winner.toUpperCase()}</div>}
      </div>
    </div>
  );
};

export default TicTac; */


